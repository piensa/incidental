{"Mappings": {"ClusterPackagesJson": {"default": {"default": "[\"adminrouter--1166a3736442e7963a68d1d644bf5f54ca3cb01d\", \"avro-cpp--6cffe8b4951f0f945f76eecc43a67c0da53e981b\", \"boost-libs--8d515c2f703c666ae1b6c5ccc35cc0f8fa36677f\", \"bootstrap--24be1a7ff4d16c3ff4889ba3c3d49175251a712d\", \"boto--3890cb2817c00b874ba033abe784b5b343caa3c7\", \"check-time--79e3f6ab99125471e1d94d5f6bc0fea88446831c\", \"cni--7a8572e385c3f5262945c52c8003d1bbb22cf7aa\", \"cosmos--e84c5bf3259405df90d682536ba445cc4839a324\", \"curl--17866a8ae9305826aa5f357a09db2c1f2b2c2ad0\", \"dcos-checks--8fd33919e6f163dba1bd13e4c7e4e0523919a719\", \"dcos-cni--12a77c1e9bebd4cbd600524a864c2bd8483330d3\", \"dcos-config--setup_9203acdf5a661b411e9c50ef8455f09754b9ba82\", \"dcos-diagnostics--e3b557b0ec8e98617d0cd0fdf136ef9dded96316\", \"dcos-history--23de88ddc1a5f9018dd11b279c5be6a768a18de4\", \"dcos-image--0153db44cf79de8df3c1e1b938166661638c99e7\", \"dcos-image-deps--81d23d00b1acddb316c9b15fd8499c2b10f6b697\", \"dcos-integration-test--9ec173650d4e73ba494603324e7583d23970e4b8\", \"dcos-log--d2af4b1a47d3755a51823e95fbc6c366cf0f9269\", \"dcos-metadata--setup_9203acdf5a661b411e9c50ef8455f09754b9ba82\", \"dcos-metrics--658acf4c34b2dd974ba7aa07685377d64b61a2cf\", \"dcos-oauth--445bb1388670981c6acc667b2529fc32d4c1fbd4\", \"dcos-signal--4366023212ea49a64c5c9aef1965e5a3133c4b61\", \"dcos-test-utils--1066d896d25f4c1e3f6d9a5e7f9c1c6e8c675bb7\", \"dcos-ui--565495ca2af307abcc74271b192011c913989670\", \"dnspython--0be432372a3820eafcfa66975943c9536dbe1164\", \"docker-gc--89f5535aea154dca504f84cd60eac6f61836aef9\", \"dvdcli--ee85411e3cb9f0988ed54b5cc0789172b887f12f\", \"erlang--d693172f6f033707c7f07ff78fc18ac543d66b41\", \"exhibitor--c3e48bbae19c0ed9c30d7f9396305d1e77130658\", \"flask--6d0f985ad677e8422c7190cbe207424acd813c3b\", \"java--ce5ff19502fca31eaf4a9af86d50a10a8c212a5b\", \"libevent--05dc18bc0ab7434b2738318c5ebaa2e61a311f50\", \"libffi--0e5b99b94f296b2a9a1b75e9fe5f74f5446f5e9b\", \"libsodium--e7056355f1fe160ade83aac0d11352a2bf3844e6\", \"logrotate--877aece1fd506af3b9167b6938c316adfa79d4f5\", \"marathon--accdc43bafeca02da1be340baba4b55011eadf63\", \"mesos--3d4d6dbb15047d80611fa7974b8e8bf69c505200\", \"mesos-dns--600da87080b7634f2380594499004a7ff0b34662\", \"mesos-modules--9f7fdbe4a447739476b075088c9c80532d8f5c49\", \"metronome--2ec6f56be44ed822e7228cb66c4dae6a78345789\", \"navstar--c66f92f01d837433de3e2b19d221c64d26cc54b1\", \"ncurses--030fd6b08ed46a7ecce001c36901f5b4ad5d2af5\", \"octarine--4e37c062d2f145f9c2ce01d30dadf72c2aac5c4a\", \"openssl--44777d19d54a3c33cc19543f2201cb20bf085d98\", \"pkgpanda-api--88ac4a7f45df91bb7edc400d9104cdf223b28d13\", \"pkgpanda-role--612a6734567cc0c7c2ae1d508f03172f4bc7beed\", \"pytest--5e26c8ed9fd2c325672d56fe558299bfbd0f7018\", \"python--5a4285ff7296548732203950bf73d360ea67f6ab\", \"python-azure-mgmt-resource--26cbe8349f3fe139f7dc8bff7f0cb735382314fc\", \"python-cryptography--0d83d8afef4a8faddf0d8b713619d9d76e510a9e\", \"python-dateutil--519201adebeba186049ecd79a9f358f614173b10\", \"python-docopt--0af809c220a922f7f6c58f15beafebaa043477c7\", \"python-gunicorn--2ceb53716237da0736f67f4004682083f6ac68e1\", \"python-isodate--c9efb5859a0cfb06d82f25220cc5b387914af85d\", \"python-jinja2--601a1443aa4c649ab1da10c2a6d7a4477a263fb3\", \"python-kazoo--0ff8e6ef528f58c6f36f0a9df6dc27d3871e5c27\", \"python-markupsafe--1388c95920b4eb920c7a753d620a1ad07fc8b64d\", \"python-passlib--4691268be760073188b555dc436f836c6706b37a\", \"python-pyyaml--d8a775d6e43da5eb239af5cccdf1d3fceeb0335f\", \"python-requests--db0474fab16019ba29a609a354285f221c1a2859\", \"python-retrying--37dd25bf69bcbefe0c50139085d6bb2e22ccf439\", \"python-tox--322c468e2a75c5b143cb06af460b5e801ee34342\", \"rexray--da7f17f8a4b772c0bac3f8d289a08abd4ff272b4\", \"six--93734bac9907087744815f9cb5b6152e9a198fae\", \"spartan--c3d8005b1340bcbc3a00496861745b2d0bb2d697\", \"strace--9be573456909e3931a890785eb6474af7e0dcce4\", \"teamcity-messages--073793b16cf369e58ebdb6348b93ed14b0e5e59a\", \"toybox--0c49f879bfe2f99e6f99b397136894fa5096fa0c\"]"}}, "RegionToAmi": {"eu-central-1": {"stable": "ami-4733f928"}, "eu-west-1": {"stable": "ami-89f6dbef"}, "ap-northeast-1": {"stable": "ami-86f1b9e1"}, "us-east-1": {"stable": "ami-42ad7d54"}, "sa-east-1": {"stable": "ami-c51573a9"}, "us-west-1": {"stable": "ami-1a1b457a"}, "us-gov-west-1": {"stable": "ami-a846fcc9"}, "ap-southeast-2": {"stable": "ami-5baeae38"}, "ap-southeast-1": {"stable": "ami-27cc7d44"}, "us-west-2": {"stable": "ami-2551d145"}}, "Parameters": {"PublicSubnetRange": {"default": "10.0.4.0/22"}, "PrivateSubnetRange": {"default": "10.0.0.0/22"}, "SlaveInstanceType": {"default": "m3.xlarge"}, "PublicSlaveInstanceType": {"default": "m3.xlarge"}, "StackCreationTimeout": {"default": "PT45M"}, "MasterInstanceType": {"default": "m3.xlarge"}, "VPCSubnetRange": {"default": "10.0.0.0/16"}}, "NATAmi": {"eu-central-1": {"default": "ami-204c7a3d"}, "eu-west-1": {"default": "ami-3760b040"}, "ap-northeast-1": {"default": "ami-55c29e54"}, "us-east-1": {"default": "ami-4c9e4b24"}, "sa-east-1": {"default": "ami-b972dba4"}, "us-west-1": {"default": "ami-2b2b296e"}, "us-gov-west-1": {"default": "ami-e8ab1489"}, "ap-southeast-2": {"default": "ami-996402a3"}, "ap-southeast-1": {"default": "ami-b082dae2"}, "us-west-2": {"default": "ami-bb69128b"}}}, "Outputs": {"PublicSlaveDnsAddress": {"Value": {"Fn::GetAtt": ["PublicSlaveLoadBalancer", "DNSName"]}, "Description": "Public slaves"}, "ExhibitorS3Bucket": {"Value": {"Ref": "ExhibitorS3Bucket"}, "Description": "Exhibitor S3 bucket name"}, "DnsAddress": {"Value": {"Fn::GetAtt": ["ElasticLoadBalancer", "DNSName"]}, "Description": "Mesos Master"}}, "Resources": {"PrivateSubnet": {"Properties": {"CidrBlock": {"Fn::FindInMap": ["Parameters", "PrivateSubnetRange", "default"]}, "Tags": [{"Key": "Application", "Value": {"Ref": "AWS::StackName"}}, {"Key": "Network", "Value": "Private"}], "VpcId": {"Ref": "Vpc"}}, "DependsOn": "Vpc", "Type": "AWS::EC2::Subnet"}, "MasterLaunchConfig": {"Properties": {"ImageId": {"Fn::FindInMap": ["RegionToAmi", {"Ref": "AWS::Region"}, "stable"]}, "EbsOptimized": "true", "IamInstanceProfile": {"Ref": "MasterInstanceProfile"}, "InstanceType": {"Fn::FindInMap": ["Parameters", "MasterInstanceType", "default"]}, "AssociatePublicIpAddress": "true", "SecurityGroups": [{"Ref": "MasterSecurityGroup"}, {"Ref": "AdminSecurityGroup"}], "BlockDeviceMappings": [{"VirtualName": "ephemeral0", "DeviceName": "/dev/sdb"}], "KeyName": {"Ref": "KeyName"}, "UserData": {"Fn::Base64": {"Fn::Join": ["", ["#cloud-config", "\n", "\"coreos\":", "\n", "  \"units\":", "\n", "  - \"command\": |-", "\n", "      start", "\n", "    \"content\": |", "\n", "      [Unit]", "\n", "      Description=AWS Setup: Formats the /var/lib ephemeral drive", "\n", "      Before=var-lib.mount dbus.service", "\n", "      [Service]", "\n", "      Type=oneshot", "\n", "      RemainAfterExit=yes", "\n", "      ExecStart=/bin/bash -c \"(blkid -t TYPE=ext4 | grep xvdb) || (/usr/sbin/mkfs.ext4 -F /dev/xvdb)\"", "\n", "    \"name\": |-", "\n", "      format-var-lib-ephemeral.service", "\n", "  - \"command\": |-", "\n", "      start", "\n", "    \"content\": |", "\n", "      [Unit]", "\n", "      Description=AWS Setup: Mount /var/lib", "\n", "      Before=dbus.service", "\n", "      [Mount]", "\n", "      What=/dev/xvdb", "\n", "      Where=/var/lib", "\n", "      Type=ext4", "\n", "    \"name\": |-", "\n", "      var-lib.mount", "\n", "  - \"command\": |-", "\n", "      stop", "\n", "    \"mask\": !!bool |-", "\n", "      true", "\n", "    \"name\": |-", "\n", "      etcd.service", "\n", "  - \"command\": |-", "\n", "      stop", "\n", "    \"mask\": !!bool |-", "\n", "      true", "\n", "    \"name\": |-", "\n", "      update-engine.service", "\n", "  - \"command\": |-", "\n", "      stop", "\n", "    \"mask\": !!bool |-", "\n", "      true", "\n", "    \"name\": |-", "\n", "      locksmithd.service", "\n", "  - \"command\": |-", "\n", "      stop", "\n", "    \"name\": |-", "\n", "      systemd-resolved.service", "\n", "  - \"command\": |-", "\n", "      restart", "\n", "    \"name\": |-", "\n", "      systemd-journald.service", "\n", "  - \"command\": |-", "\n", "      restart", "\n", "    \"name\": |-", "\n", "      docker.service", "\n", "  - \"command\": |-", "\n", "      start", "\n", "    \"content\": |", "\n", "      [Unit]", "\n", "      Before=dcos.target", "\n", "      [Service]", "\n", "      Type=oneshot", "\n", "      StandardOutput=journal+console", "\n", "      StandardError=journal+console", "\n", "      ExecStartPre=/usr/bin/mkdir -p /etc/profile.d", "\n", "      ExecStart=/usr/bin/ln -sf /opt/mesosphere/bin/add_dcos_path.sh /etc/profile.d/dcos.sh", "\n", "    \"name\": |-", "\n", "      dcos-link-env.service", "\n", "  - \"content\": |", "\n", "      [Unit]", "\n", "      Description=Pkgpanda: Download DC/OS to this host.", "\n", "      After=network-online.target", "\n", "      Wants=network-online.target", "\n", "      ConditionPathExists=!/opt/mesosphere/", "\n", "      [Service]", "\n", "      Type=oneshot", "\n", "      StandardOutput=journal+console", "\n", "      StandardError=journal+console", "\n", "      ExecStartPre=/usr/bin/curl --keepalive-time 2 -fLsSv --retry 20 -Y 100000 -y 60 -o /tmp/bootstrap.tar.xz https://downloads.dcos.io/dcos/EarlyAccess/bootstrap/ff88379126df82559446b5916c769f562edb25d7.bootstrap.tar.xz", "\n", "      ExecStartPre=/usr/bin/mkdir -p /opt/mesosphere", "\n", "      ExecStart=/usr/bin/tar -axf /tmp/bootstrap.tar.xz -C /opt/mesosphere", "\n", "      ExecStartPost=-/usr/bin/rm -f /tmp/bootstrap.tar.xz", "\n", "    \"name\": |-", "\n", "      dcos-download.service", "\n", "  - \"command\": |-", "\n", "      start", "\n", "    \"content\": |", "\n", "      [Unit]", "\n", "      Description=Pkgpanda: Specialize DC/OS for this host.", "\n", "      Requires=dcos-download.service", "\n", "      After=dcos-download.service", "\n", "      [Service]", "\n", "      Type=oneshot", "\n", "      StandardOutput=journal+console", "\n", "      StandardError=journal+console", "\n", "      EnvironmentFile=/opt/mesosphere/environment", "\n", "      ExecStart=/opt/mesosphere/bin/pkgpanda setup --no-block-systemd", "\n", "      [Install]", "\n", "      WantedBy=multi-user.target", "\n", "    \"enable\": !!bool |-", "\n", "      true", "\n", "    \"name\": |-", "\n", "      dcos-setup.service", "\n", "    \"no_block\": !!bool |-", "\n", "      true", "\n", "  - \"command\": |-", "\n", "      start", "\n", "    \"content\": |-", "\n", "      [Unit]", "\n", "      Description=AWS Setup: Signal CloudFormation Success", "\n", "      ConditionPathExists=!/var/lib/dcos-cfn-signal", "\n", "      [Service]", "\n", "      Type=simple", "\n", "      Restart=on-failure", "\n", "      StartLimitInterval=0", "\n", "      RestartSec=15s", "\n", "      EnvironmentFile=/opt/mesosphere/environment", "\n", "      EnvironmentFile=/opt/mesosphere/etc/cfn_signal_metadata", "\n", "      Environment=\"AWS_CFN_SIGNAL_THIS_RESOURCE=MasterServerGroup\"", "\n", "      ExecStartPre=/bin/ping -c1 leader.mesos", "\n", "      ExecStartPre=/opt/mesosphere/bin/cfn-signal", "\n", "      ExecStart=/usr/bin/touch /var/lib/dcos-cfn-signal", "\n", "    \"name\": |-", "\n", "      dcos-cfn-signal.service", "\n", "    \"no_block\": !!bool |-", "\n", "      true", "\n", "  \"update\":", "\n", "    \"reboot-strategy\": |-", "\n", "      off", "\n", "\"write_files\":", "\n", "- \"content\": |", "\n", "    https://downloads.dcos.io/dcos/EarlyAccess", "\n", "  \"owner\": |-", "\n", "    root", "\n", "  \"path\": |-", "\n", "    /etc/mesosphere/setup-flags/repository-url", "\n", "  \"permissions\": |-", "\n", "    0644", "\n", "- \"content\": |", "\n", "    ", {"Fn::FindInMap": ["ClusterPackagesJson", "default", "default"]}, "\n", "  \"owner\": |-", "\n", "    root", "\n", "  \"path\": |-", "\n", "    /etc/mesosphere/setup-flags/cluster-packages.json", "\n", "  \"permissions\": |-", "\n", "    0644", "\n", "- \"content\": |", "\n", "    [Journal]", "\n", "    MaxLevelConsole=warning", "\n", "    RateLimitInterval=1s", "\n", "    RateLimitBurst=20000", "\n", "  \"owner\": |-", "\n", "    root", "\n", "  \"path\": |-", "\n", "    /etc/systemd/journald.conf.d/dcos.conf", "\n", "  \"permissions\": |-", "\n", "    0644", "\n", "- \"content\": |", "\n", "    libstorage:", "\n", "      integration:", "\n", "        volume:", "\n", "          operations:", "\n", "            unmount:", "\n", "              ignoreusedcount: true", "\n", "      server:", "\n", "        tasks:", "\n", "          logTimeout: 5m", "\n", "    rexray:", "\n", "      loglevel: info", "\n", "      service: ebs", "\n", "  \"path\": |-", "\n", "    /etc/rexray/config.yml", "\n", "  \"permissions\": |-", "\n", "    0644", "\n", "- \"content\": |", "\n", "    \"bound_values\":", "\n", "      \"adminrouter_auth_enabled\": |-", "\n", "        ", {"Ref": "OAuthEnabled"}, "\n", "      \"agent_role\": |-", "\n", "        ", {"Ref": "SlaveRole"}, "\n", "      \"aws_region\": |-", "\n", "        ", {"Ref": "AWS::Region"}, "\n", "      \"aws_stack_id\": |-", "\n", "        ", {"Ref": "AWS::StackId"}, "\n", "      \"aws_stack_name\": |-", "\n", "        ", {"Ref": "AWS::StackName"}, "\n", "      \"cluster_name\": |-", "\n", "        ", {"Ref": "AWS::StackName"}, "\n", "      \"exhibitor_address\": |-", "\n", "        ", {"Fn::GetAtt": ["InternalMasterLoadBalancer", "DNSName"]}, "\n", "      \"master_external_loadbalancer\": |-", "\n", "        ", {"Fn::GetAtt": ["ElasticLoadBalancer", "DNSName"]}, "\n", "      \"master_role\": |-", "\n", "        ", {"Ref": "MasterRole"}, "\n", "      \"oauth_enabled\": |-", "\n", "        ", {"Ref": "OAuthEnabled"}, "\n", "      \"s3_bucket\": |-", "\n", "        ", {"Ref": "ExhibitorS3Bucket"}, "\n", "      \"s3_prefix\": |-", "\n", "        ", {"Ref": "AWS::StackName"}, "\n", "    \"late_bound_package_id\": |-", "\n", "      dcos-provider-9203acdf5a661b411e9c50ef8455f09754b9ba82-aws--setup", "\n", "  \"owner\": |-", "\n", "    root", "\n", "  \"path\": |-", "\n", "    /etc/mesosphere/setup-flags/late-config.yaml", "\n", "  \"permissions\": |-", "\n", "    0644", "\n", "- \"content\": \"\"", "\n", "  \"path\": |-", "\n", "    /etc/mesosphere/roles/master", "\n", "- \"content\": \"\"", "\n", "  \"path\": |-", "\n", "    /etc/mesosphere/roles/aws_master", "\n", "- \"content\": \"\"", "\n", "  \"path\": |-", "\n", "    /etc/mesosphere/roles/aws", "\n"]]}}}, "Type": "AWS::AutoScaling::LaunchConfiguration"}, "SlaveLaunchConfig": {"Properties": {"ImageId": {"Fn::FindInMap": ["RegionToAmi", {"Ref": "AWS::Region"}, "stable"]}, "EbsOptimized": "true", "IamInstanceProfile": {"Ref": "SlaveInstanceProfile"}, "InstanceType": {"Fn::FindInMap": ["Parameters", "SlaveInstanceType", "default"]}, "AssociatePublicIpAddress": "false", "SecurityGroups": [{"Ref": "SlaveSecurityGroup"}], "BlockDeviceMappings": [{"VirtualName": "ephemeral0", "DeviceName": "/dev/sdb"}], "KeyName": {"Ref": "KeyName"}, "UserData": {"Fn::Base64": {"Fn::Join": ["", ["#cloud-config", "\n", "\"coreos\":", "\n", "  \"units\":", "\n", "  - \"command\": |-", "\n", "      start", "\n", "    \"content\": |", "\n", "      [Unit]", "\n", "      Description=AWS Setup: Formats the /var/lib ephemeral drive", "\n", "      Before=var-lib.mount dbus.service", "\n", "      [Service]", "\n", "      Type=oneshot", "\n", "      RemainAfterExit=yes", "\n", "      ExecStart=/bin/bash -c \"(blkid -t TYPE=ext4 | grep xvdb) || (/usr/sbin/mkfs.ext4 -F /dev/xvdb)\"", "\n", "    \"name\": |-", "\n", "      format-var-lib-ephemeral.service", "\n", "  - \"command\": |-", "\n", "      start", "\n", "    \"content\": |", "\n", "      [Unit]", "\n", "      Description=AWS Setup: Mount /var/lib", "\n", "      Before=dbus.service", "\n", "      [Mount]", "\n", "      What=/dev/xvdb", "\n", "      Where=/var/lib", "\n", "      Type=ext4", "\n", "    \"name\": |-", "\n", "      var-lib.mount", "\n", "  - \"command\": |-", "\n", "      stop", "\n", "    \"mask\": !!bool |-", "\n", "      true", "\n", "    \"name\": |-", "\n", "      etcd.service", "\n", "  - \"command\": |-", "\n", "      stop", "\n", "    \"mask\": !!bool |-", "\n", "      true", "\n", "    \"name\": |-", "\n", "      update-engine.service", "\n", "  - \"command\": |-", "\n", "      stop", "\n", "    \"mask\": !!bool |-", "\n", "      true", "\n", "    \"name\": |-", "\n", "      locksmithd.service", "\n", "  - \"command\": |-", "\n", "      stop", "\n", "    \"name\": |-", "\n", "      systemd-resolved.service", "\n", "  - \"command\": |-", "\n", "      restart", "\n", "    \"name\": |-", "\n", "      systemd-journald.service", "\n", "  - \"command\": |-", "\n", "      restart", "\n", "    \"name\": |-", "\n", "      docker.service", "\n", "  - \"command\": |-", "\n", "      start", "\n", "    \"content\": |", "\n", "      [Unit]", "\n", "      Before=dcos.target", "\n", "      [Service]", "\n", "      Type=oneshot", "\n", "      StandardOutput=journal+console", "\n", "      StandardError=journal+console", "\n", "      ExecStartPre=/usr/bin/mkdir -p /etc/profile.d", "\n", "      ExecStart=/usr/bin/ln -sf /opt/mesosphere/bin/add_dcos_path.sh /etc/profile.d/dcos.sh", "\n", "    \"name\": |-", "\n", "      dcos-link-env.service", "\n", "  - \"content\": |", "\n", "      [Unit]", "\n", "      Description=Pkgpanda: Download DC/OS to this host.", "\n", "      After=network-online.target", "\n", "      Wants=network-online.target", "\n", "      ConditionPathExists=!/opt/mesosphere/", "\n", "      [Service]", "\n", "      Type=oneshot", "\n", "      StandardOutput=journal+console", "\n", "      StandardError=journal+console", "\n", "      ExecStartPre=/usr/bin/curl --keepalive-time 2 -fLsSv --retry 20 -Y 100000 -y 60 -o /tmp/bootstrap.tar.xz https://downloads.dcos.io/dcos/EarlyAccess/bootstrap/ff88379126df82559446b5916c769f562edb25d7.bootstrap.tar.xz", "\n", "      ExecStartPre=/usr/bin/mkdir -p /opt/mesosphere", "\n", "      ExecStart=/usr/bin/tar -axf /tmp/bootstrap.tar.xz -C /opt/mesosphere", "\n", "      ExecStartPost=-/usr/bin/rm -f /tmp/bootstrap.tar.xz", "\n", "    \"name\": |-", "\n", "      dcos-download.service", "\n", "  - \"command\": |-", "\n", "      start", "\n", "    \"content\": |", "\n", "      [Unit]", "\n", "      Description=Pkgpanda: Specialize DC/OS for this host.", "\n", "      Requires=dcos-download.service", "\n", "      After=dcos-download.service", "\n", "      [Service]", "\n", "      Type=oneshot", "\n", "      StandardOutput=journal+console", "\n", "      StandardError=journal+console", "\n", "      EnvironmentFile=/opt/mesosphere/environment", "\n", "      ExecStart=/opt/mesosphere/bin/pkgpanda setup --no-block-systemd", "\n", "      [Install]", "\n", "      WantedBy=multi-user.target", "\n", "    \"enable\": !!bool |-", "\n", "      true", "\n", "    \"name\": |-", "\n", "      dcos-setup.service", "\n", "    \"no_block\": !!bool |-", "\n", "      true", "\n", "  - \"command\": |-", "\n", "      start", "\n", "    \"content\": |-", "\n", "      [Unit]", "\n", "      Description=AWS Setup: Signal CloudFormation Success", "\n", "      ConditionPathExists=!/var/lib/dcos-cfn-signal", "\n", "      [Service]", "\n", "      Type=simple", "\n", "      Restart=on-failure", "\n", "      StartLimitInterval=0", "\n", "      RestartSec=15s", "\n", "      EnvironmentFile=/opt/mesosphere/environment", "\n", "      EnvironmentFile=/opt/mesosphere/etc/cfn_signal_metadata", "\n", "      Environment=\"AWS_CFN_SIGNAL_THIS_RESOURCE=SlaveServerGroup\"", "\n", "      ExecStartPre=/bin/ping -c1 leader.mesos", "\n", "      ExecStartPre=/opt/mesosphere/bin/cfn-signal", "\n", "      ExecStart=/usr/bin/touch /var/lib/dcos-cfn-signal", "\n", "    \"name\": |-", "\n", "      dcos-cfn-signal.service", "\n", "    \"no_block\": !!bool |-", "\n", "      true", "\n", "  \"update\":", "\n", "    \"reboot-strategy\": |-", "\n", "      off", "\n", "\"write_files\":", "\n", "- \"content\": |", "\n", "    https://downloads.dcos.io/dcos/EarlyAccess", "\n", "  \"owner\": |-", "\n", "    root", "\n", "  \"path\": |-", "\n", "    /etc/mesosphere/setup-flags/repository-url", "\n", "  \"permissions\": |-", "\n", "    0644", "\n", "- \"content\": |", "\n", "    ", {"Fn::FindInMap": ["ClusterPackagesJson", "default", "default"]}, "\n", "  \"owner\": |-", "\n", "    root", "\n", "  \"path\": |-", "\n", "    /etc/mesosphere/setup-flags/cluster-packages.json", "\n", "  \"permissions\": |-", "\n", "    0644", "\n", "- \"content\": |", "\n", "    [Journal]", "\n", "    MaxLevelConsole=warning", "\n", "    RateLimitInterval=1s", "\n", "    RateLimitBurst=20000", "\n", "  \"owner\": |-", "\n", "    root", "\n", "  \"path\": |-", "\n", "    /etc/systemd/journald.conf.d/dcos.conf", "\n", "  \"permissions\": |-", "\n", "    0644", "\n", "- \"content\": |", "\n", "    libstorage:", "\n", "      integration:", "\n", "        volume:", "\n", "          operations:", "\n", "            unmount:", "\n", "              ignoreusedcount: true", "\n", "      server:", "\n", "        tasks:", "\n", "          logTimeout: 5m", "\n", "    rexray:", "\n", "      loglevel: info", "\n", "      service: ebs", "\n", "  \"path\": |-", "\n", "    /etc/rexray/config.yml", "\n", "  \"permissions\": |-", "\n", "    0644", "\n", "- \"content\": |", "\n", "    \"bound_values\":", "\n", "      \"adminrouter_auth_enabled\": |-", "\n", "        ", {"Ref": "OAuthEnabled"}, "\n", "      \"agent_role\": |-", "\n", "        ", {"Ref": "SlaveRole"}, "\n", "      \"aws_region\": |-", "\n", "        ", {"Ref": "AWS::Region"}, "\n", "      \"aws_stack_id\": |-", "\n", "        ", {"Ref": "AWS::StackId"}, "\n", "      \"aws_stack_name\": |-", "\n", "        ", {"Ref": "AWS::StackName"}, "\n", "      \"cluster_name\": |-", "\n", "        ", {"Ref": "AWS::StackName"}, "\n", "      \"exhibitor_address\": |-", "\n", "        ", {"Fn::GetAtt": ["InternalMasterLoadBalancer", "DNSName"]}, "\n", "      \"master_external_loadbalancer\": |-", "\n", "        ", {"Fn::GetAtt": ["ElasticLoadBalancer", "DNSName"]}, "\n", "      \"master_role\": |-", "\n", "        ", {"Ref": "MasterRole"}, "\n", "      \"oauth_enabled\": |-", "\n", "        ", {"Ref": "OAuthEnabled"}, "\n", "      \"s3_bucket\": |-", "\n", "        ", {"Ref": "ExhibitorS3Bucket"}, "\n", "      \"s3_prefix\": |-", "\n", "        ", {"Ref": "AWS::StackName"}, "\n", "    \"late_bound_package_id\": |-", "\n", "      dcos-provider-9203acdf5a661b411e9c50ef8455f09754b9ba82-aws--setup", "\n", "  \"owner\": |-", "\n", "    root", "\n", "  \"path\": |-", "\n", "    /etc/mesosphere/setup-flags/late-config.yaml", "\n", "  \"permissions\": |-", "\n", "    0644", "\n", "- \"content\": \"\"", "\n", "  \"path\": |-", "\n", "    /etc/mesosphere/roles/slave", "\n", "- \"content\": \"\"", "\n", "  \"path\": |-", "\n", "    /etc/mesosphere/roles/aws", "\n"]]}}}, "Type": "AWS::AutoScaling::LaunchConfiguration"}, "PublicNetworkAcl": {"Properties": {"Tags": [{"Key": "Application", "Value": {"Ref": "AWS::StackName"}}, {"Key": "Network", "Value": "Public"}], "VpcId": {"Ref": "Vpc"}}, "Type": "AWS::EC2::NetworkAcl"}, "ElasticLoadBalancer": {"Properties": {"Listeners": [{"InstanceProtocol": "TCP", "Protocol": "TCP", "InstancePort": "80", "LoadBalancerPort": "80"}, {"InstanceProtocol": "TCP", "Protocol": "TCP", "InstancePort": "443", "LoadBalancerPort": "443"}], "SecurityGroups": [{"Ref": "LbSecurityGroup"}, {"Ref": "AdminSecurityGroup"}], "Subnets": [{"Ref": "PublicSubnet"}], "HealthCheck": {"Timeout": "5", "HealthyThreshold": "2", "UnhealthyThreshold": "2", "Interval": "30", "Target": "TCP:5050"}}, "DependsOn": "GatewayToInternet", "Type": "AWS::ElasticLoadBalancing::LoadBalancer"}, "PrivateRoute": {"Properties": {"DestinationCidrBlock": "0.0.0.0/0", "InstanceId": {"Ref": "NATInstance"}, "RouteTableId": {"Ref": "PrivateRouteTable"}}, "Type": "AWS::EC2::Route"}, "PublicSubnet": {"Properties": {"CidrBlock": {"Fn::FindInMap": ["Parameters", "PublicSubnetRange", "default"]}, "Tags": [{"Key": "Application", "Value": {"Ref": "AWS::StackName"}}, {"Key": "Network", "Value": "Public"}], "VpcId": {"Ref": "Vpc"}}, "DependsOn": "Vpc", "Type": "AWS::EC2::Subnet"}, "GatewayToInternet": {"Properties": {"InternetGatewayId": {"Ref": "InternetGateway"}, "VpcId": {"Ref": "Vpc"}}, "DependsOn": "InternetGateway", "Type": "AWS::EC2::VPCGatewayAttachment"}, "PublicSlaveToPublicSlaveIngress": {"Properties": {"ToPort": "65535", "FromPort": "0", "IpProtocol": "-1", "GroupId": {"Ref": "PublicSlaveSecurityGroup"}, "SourceSecurityGroupId": {"Ref": "PublicSlaveSecurityGroup"}}, "Type": "AWS::EC2::SecurityGroupIngress"}, "VPCDHCPOptionsAssociation": {"Properties": {"VpcId": {"Ref": "Vpc"}, "DhcpOptionsId": {"Ref": "DHCPOptions"}}, "DependsOn": "Vpc", "Type": "AWS::EC2::VPCDHCPOptionsAssociation"}, "PublicSlaveLaunchConfig": {"Properties": {"ImageId": {"Fn::FindInMap": ["RegionToAmi", {"Ref": "AWS::Region"}, "stable"]}, "EbsOptimized": "true", "IamInstanceProfile": {"Ref": "SlaveInstanceProfile"}, "InstanceType": {"Fn::FindInMap": ["Parameters", "PublicSlaveInstanceType", "default"]}, "AssociatePublicIpAddress": "true", "SecurityGroups": [{"Ref": "PublicSlaveSecurityGroup"}], "BlockDeviceMappings": [{"VirtualName": "ephemeral0", "DeviceName": "/dev/sdb"}], "KeyName": {"Ref": "KeyName"}, "UserData": {"Fn::Base64": {"Fn::Join": ["", ["#cloud-config", "\n", "\"coreos\":", "\n", "  \"units\":", "\n", "  - \"command\": |-", "\n", "      start", "\n", "    \"content\": |", "\n", "      [Unit]", "\n", "      Description=AWS Setup: Formats the /var/lib ephemeral drive", "\n", "      Before=var-lib.mount dbus.service", "\n", "      [Service]", "\n", "      Type=oneshot", "\n", "      RemainAfterExit=yes", "\n", "      ExecStart=/bin/bash -c \"(blkid -t TYPE=ext4 | grep xvdb) || (/usr/sbin/mkfs.ext4 -F /dev/xvdb)\"", "\n", "    \"name\": |-", "\n", "      format-var-lib-ephemeral.service", "\n", "  - \"command\": |-", "\n", "      start", "\n", "    \"content\": |", "\n", "      [Unit]", "\n", "      Description=AWS Setup: Mount /var/lib", "\n", "      Before=dbus.service", "\n", "      [Mount]", "\n", "      What=/dev/xvdb", "\n", "      Where=/var/lib", "\n", "      Type=ext4", "\n", "    \"name\": |-", "\n", "      var-lib.mount", "\n", "  - \"command\": |-", "\n", "      stop", "\n", "    \"mask\": !!bool |-", "\n", "      true", "\n", "    \"name\": |-", "\n", "      etcd.service", "\n", "  - \"command\": |-", "\n", "      stop", "\n", "    \"mask\": !!bool |-", "\n", "      true", "\n", "    \"name\": |-", "\n", "      update-engine.service", "\n", "  - \"command\": |-", "\n", "      stop", "\n", "    \"mask\": !!bool |-", "\n", "      true", "\n", "    \"name\": |-", "\n", "      locksmithd.service", "\n", "  - \"command\": |-", "\n", "      stop", "\n", "    \"name\": |-", "\n", "      systemd-resolved.service", "\n", "  - \"command\": |-", "\n", "      restart", "\n", "    \"name\": |-", "\n", "      systemd-journald.service", "\n", "  - \"command\": |-", "\n", "      restart", "\n", "    \"name\": |-", "\n", "      docker.service", "\n", "  - \"command\": |-", "\n", "      start", "\n", "    \"content\": |", "\n", "      [Unit]", "\n", "      Before=dcos.target", "\n", "      [Service]", "\n", "      Type=oneshot", "\n", "      StandardOutput=journal+console", "\n", "      StandardError=journal+console", "\n", "      ExecStartPre=/usr/bin/mkdir -p /etc/profile.d", "\n", "      ExecStart=/usr/bin/ln -sf /opt/mesosphere/bin/add_dcos_path.sh /etc/profile.d/dcos.sh", "\n", "    \"name\": |-", "\n", "      dcos-link-env.service", "\n", "  - \"content\": |", "\n", "      [Unit]", "\n", "      Description=Pkgpanda: Download DC/OS to this host.", "\n", "      After=network-online.target", "\n", "      Wants=network-online.target", "\n", "      ConditionPathExists=!/opt/mesosphere/", "\n", "      [Service]", "\n", "      Type=oneshot", "\n", "      StandardOutput=journal+console", "\n", "      StandardError=journal+console", "\n", "      ExecStartPre=/usr/bin/curl --keepalive-time 2 -fLsSv --retry 20 -Y 100000 -y 60 -o /tmp/bootstrap.tar.xz https://downloads.dcos.io/dcos/EarlyAccess/bootstrap/ff88379126df82559446b5916c769f562edb25d7.bootstrap.tar.xz", "\n", "      ExecStartPre=/usr/bin/mkdir -p /opt/mesosphere", "\n", "      ExecStart=/usr/bin/tar -axf /tmp/bootstrap.tar.xz -C /opt/mesosphere", "\n", "      ExecStartPost=-/usr/bin/rm -f /tmp/bootstrap.tar.xz", "\n", "    \"name\": |-", "\n", "      dcos-download.service", "\n", "  - \"command\": |-", "\n", "      start", "\n", "    \"content\": |", "\n", "      [Unit]", "\n", "      Description=Pkgpanda: Specialize DC/OS for this host.", "\n", "      Requires=dcos-download.service", "\n", "      After=dcos-download.service", "\n", "      [Service]", "\n", "      Type=oneshot", "\n", "      StandardOutput=journal+console", "\n", "      StandardError=journal+console", "\n", "      EnvironmentFile=/opt/mesosphere/environment", "\n", "      ExecStart=/opt/mesosphere/bin/pkgpanda setup --no-block-systemd", "\n", "      [Install]", "\n", "      WantedBy=multi-user.target", "\n", "    \"enable\": !!bool |-", "\n", "      true", "\n", "    \"name\": |-", "\n", "      dcos-setup.service", "\n", "    \"no_block\": !!bool |-", "\n", "      true", "\n", "  - \"command\": |-", "\n", "      start", "\n", "    \"content\": |-", "\n", "      [Unit]", "\n", "      Description=AWS Setup: Signal CloudFormation Success", "\n", "      ConditionPathExists=!/var/lib/dcos-cfn-signal", "\n", "      [Service]", "\n", "      Type=simple", "\n", "      Restart=on-failure", "\n", "      StartLimitInterval=0", "\n", "      RestartSec=15s", "\n", "      EnvironmentFile=/opt/mesosphere/environment", "\n", "      EnvironmentFile=/opt/mesosphere/etc/cfn_signal_metadata", "\n", "      Environment=\"AWS_CFN_SIGNAL_THIS_RESOURCE=PublicSlaveServerGroup\"", "\n", "      ExecStartPre=/bin/ping -c1 leader.mesos", "\n", "      ExecStartPre=/opt/mesosphere/bin/cfn-signal", "\n", "      ExecStart=/usr/bin/touch /var/lib/dcos-cfn-signal", "\n", "    \"name\": |-", "\n", "      dcos-cfn-signal.service", "\n", "    \"no_block\": !!bool |-", "\n", "      true", "\n", "  \"update\":", "\n", "    \"reboot-strategy\": |-", "\n", "      off", "\n", "\"write_files\":", "\n", "- \"content\": |", "\n", "    https://downloads.dcos.io/dcos/EarlyAccess", "\n", "  \"owner\": |-", "\n", "    root", "\n", "  \"path\": |-", "\n", "    /etc/mesosphere/setup-flags/repository-url", "\n", "  \"permissions\": |-", "\n", "    0644", "\n", "- \"content\": |", "\n", "    ", {"Fn::FindInMap": ["ClusterPackagesJson", "default", "default"]}, "\n", "  \"owner\": |-", "\n", "    root", "\n", "  \"path\": |-", "\n", "    /etc/mesosphere/setup-flags/cluster-packages.json", "\n", "  \"permissions\": |-", "\n", "    0644", "\n", "- \"content\": |", "\n", "    [Journal]", "\n", "    MaxLevelConsole=warning", "\n", "    RateLimitInterval=1s", "\n", "    RateLimitBurst=20000", "\n", "  \"owner\": |-", "\n", "    root", "\n", "  \"path\": |-", "\n", "    /etc/systemd/journald.conf.d/dcos.conf", "\n", "  \"permissions\": |-", "\n", "    0644", "\n", "- \"content\": |", "\n", "    libstorage:", "\n", "      integration:", "\n", "        volume:", "\n", "          operations:", "\n", "            unmount:", "\n", "              ignoreusedcount: true", "\n", "      server:", "\n", "        tasks:", "\n", "          logTimeout: 5m", "\n", "    rexray:", "\n", "      loglevel: info", "\n", "      service: ebs", "\n", "  \"path\": |-", "\n", "    /etc/rexray/config.yml", "\n", "  \"permissions\": |-", "\n", "    0644", "\n", "- \"content\": |", "\n", "    \"bound_values\":", "\n", "      \"adminrouter_auth_enabled\": |-", "\n", "        ", {"Ref": "OAuthEnabled"}, "\n", "      \"agent_role\": |-", "\n", "        ", {"Ref": "SlaveRole"}, "\n", "      \"aws_region\": |-", "\n", "        ", {"Ref": "AWS::Region"}, "\n", "      \"aws_stack_id\": |-", "\n", "        ", {"Ref": "AWS::StackId"}, "\n", "      \"aws_stack_name\": |-", "\n", "        ", {"Ref": "AWS::StackName"}, "\n", "      \"cluster_name\": |-", "\n", "        ", {"Ref": "AWS::StackName"}, "\n", "      \"exhibitor_address\": |-", "\n", "        ", {"Fn::GetAtt": ["InternalMasterLoadBalancer", "DNSName"]}, "\n", "      \"master_external_loadbalancer\": |-", "\n", "        ", {"Fn::GetAtt": ["ElasticLoadBalancer", "DNSName"]}, "\n", "      \"master_role\": |-", "\n", "        ", {"Ref": "MasterRole"}, "\n", "      \"oauth_enabled\": |-", "\n", "        ", {"Ref": "OAuthEnabled"}, "\n", "      \"s3_bucket\": |-", "\n", "        ", {"Ref": "ExhibitorS3Bucket"}, "\n", "      \"s3_prefix\": |-", "\n", "        ", {"Ref": "AWS::StackName"}, "\n", "    \"late_bound_package_id\": |-", "\n", "      dcos-provider-9203acdf5a661b411e9c50ef8455f09754b9ba82-aws--setup", "\n", "  \"owner\": |-", "\n", "    root", "\n", "  \"path\": |-", "\n", "    /etc/mesosphere/setup-flags/late-config.yaml", "\n", "  \"permissions\": |-", "\n", "    0644", "\n", "- \"content\": \"\"", "\n", "  \"path\": |-", "\n", "    /etc/mesosphere/roles/slave_public", "\n", "- \"content\": \"\"", "\n", "  \"path\": |-", "\n", "    /etc/mesosphere/roles/aws", "\n"]]}}}, "Type": "AWS::AutoScaling::LaunchConfiguration"}, "SlaveToSlaveIngress": {"Properties": {"ToPort": "65535", "FromPort": "0", "IpProtocol": "-1", "GroupId": {"Ref": "SlaveSecurityGroup"}, "SourceSecurityGroupId": {"Ref": "SlaveSecurityGroup"}}, "Type": "AWS::EC2::SecurityGroupIngress"}, "PublicSlaveToMasterIngress": {"Properties": {"ToPort": "65535", "FromPort": "0", "IpProtocol": "-1", "GroupId": {"Ref": "MasterSecurityGroup"}, "SourceSecurityGroupId": {"Ref": "PublicSlaveSecurityGroup"}}, "Type": "AWS::EC2::SecurityGroupIngress"}, "Vpc": {"Properties": {"EnableDnsHostnames": "true", "CidrBlock": {"Fn::FindInMap": ["Parameters", "VPCSubnetRange", "default"]}, "Tags": [{"Key": "Application", "Value": {"Ref": "AWS::StackName"}}, {"Key": "Network", "Value": "Public"}], "EnableDnsSupport": "true"}, "Type": "AWS::EC2::VPC"}, "InternetGateway": {"Properties": {"Tags": [{"Key": "Application", "Value": {"Ref": "AWS::StackName"}}, {"Key": "Network", "Value": "Public"}]}, "DependsOn": "Vpc", "Type": "AWS::EC2::InternetGateway"}, "InternalMasterLoadBalancer": {"Properties": {"Scheme": "internal", "SecurityGroups": [{"Ref": "LbSecurityGroup"}, {"Ref": "AdminSecurityGroup"}, {"Ref": "SlaveSecurityGroup"}, {"Ref": "PublicSlaveSecurityGroup"}, {"Ref": "MasterSecurityGroup"}], "Subnets": [{"Ref": "PublicSubnet"}], "HealthCheck": {"Timeout": "5", "HealthyThreshold": "2", "UnhealthyThreshold": "2", "Interval": "30", "Target": "TCP:5050"}, "Listeners": [{"InstanceProtocol": "HTTP", "Protocol": "HTTP", "InstancePort": "5050", "LoadBalancerPort": "5050"}, {"InstanceProtocol": "TCP", "Protocol": "TCP", "InstancePort": "2181", "LoadBalancerPort": "2181"}, {"InstanceProtocol": "HTTP", "Protocol": "HTTP", "InstancePort": "8181", "LoadBalancerPort": "8181"}, {"InstanceProtocol": "TCP", "Protocol": "TCP", "InstancePort": "80", "LoadBalancerPort": "80"}, {"InstanceProtocol": "TCP", "Protocol": "TCP", "InstancePort": "443", "LoadBalancerPort": "443"}, {"InstanceProtocol": "HTTP", "Protocol": "HTTP", "InstancePort": "8080", "LoadBalancerPort": "8080"}]}, "Type": "AWS::ElasticLoadBalancing::LoadBalancer"}, "PublicSlaveServerGroup": {"CreationPolicy": {"ResourceSignal": {"Timeout": {"Fn::FindInMap": ["Parameters", "StackCreationTimeout", "default"]}, "Count": {"Ref": "PublicSlaveInstanceCount"}}}, "Properties": {"MaxSize": {"Ref": "PublicSlaveInstanceCount"}, "DesiredCapacity": {"Ref": "PublicSlaveInstanceCount"}, "MinSize": {"Ref": "PublicSlaveInstanceCount"}, "VPCZoneIdentifier": [{"Ref": "PublicSubnet"}], "LaunchConfigurationName": {"Ref": "PublicSlaveLaunchConfig"}, "LoadBalancerNames": [{"Ref": "PublicSlaveLoadBalancer"}], "AvailabilityZones": [{"Fn::GetAtt": ["PublicSubnet", "AvailabilityZone"]}], "Tags": [{"Key": "role", "PropagateAtLaunch": "true", "Value": "mesos-slave"}]}, "DependsOn": "GatewayToInternet", "Type": "AWS::AutoScaling::AutoScalingGroup"}, "LbSecurityGroup": {"Properties": {"GroupDescription": "Mesos Master LB", "VpcId": {"Ref": "Vpc"}}, "Type": "AWS::EC2::SecurityGroup"}, "PublicSlaveLoadBalancer": {"Properties": {"Listeners": [{"InstanceProtocol": "TCP", "Protocol": "TCP", "InstancePort": "80", "LoadBalancerPort": "80"}, {"InstanceProtocol": "TCP", "Protocol": "TCP", "InstancePort": "443", "LoadBalancerPort": "443"}], "SecurityGroups": [{"Ref": "PublicSlaveSecurityGroup"}], "Subnets": [{"Ref": "PublicSubnet"}], "HealthCheck": {"Timeout": "2", "HealthyThreshold": "2", "UnhealthyThreshold": "2", "Interval": "5", "Target": "HTTP:9090/_haproxy_health_check"}}, "DependsOn": "GatewayToInternet", "Type": "AWS::ElasticLoadBalancing::LoadBalancer"}, "PublicSubnetNetworkAclAssociation": {"Properties": {"SubnetId": {"Ref": "PublicSubnet"}, "NetworkAclId": {"Ref": "PublicNetworkAcl"}}, "Type": "AWS::EC2::SubnetNetworkAclAssociation"}, "PrivateSubnetRouteTableAssociation": {"Properties": {"SubnetId": {"Ref": "PrivateSubnet"}, "RouteTableId": {"Ref": "PrivateRouteTable"}}, "Type": "AWS::EC2::SubnetRouteTableAssociation"}, "PublicSlaveIngressOne": {"Properties": {"ToPort": "21", "FromPort": "0", "CidrIp": "0.0.0.0/0", "IpProtocol": "tcp", "GroupId": {"Ref": "PublicSlaveSecurityGroup"}}, "Type": "AWS::EC2::SecurityGroupIngress"}, "PublicRoute": {"Properties": {"GatewayId": {"Ref": "InternetGateway"}, "DestinationCidrBlock": "0.0.0.0/0", "RouteTableId": {"Ref": "PublicRouteTable"}}, "DependsOn": "GatewayToInternet", "Type": "AWS::EC2::Route"}, "ExhibitorS3Bucket": {"DeletionPolicy": "Retain", "Type": "AWS::S3::Bucket"}, "PrivateNetworkAcl": {"Properties": {"Tags": [{"Key": "Application", "Value": {"Ref": "AWS::StackName"}}, {"Key": "Network", "Value": "Public"}], "VpcId": {"Ref": "Vpc"}}, "Type": "AWS::EC2::NetworkAcl"}, "PublicSlaveToSlaveIngress": {"Properties": {"ToPort": "65535", "FromPort": "0", "IpProtocol": "-1", "GroupId": {"Ref": "SlaveSecurityGroup"}, "SourceSecurityGroupId": {"Ref": "PublicSlaveSecurityGroup"}}, "Type": "AWS::EC2::SecurityGroupIngress"}, "AdminSecurityGroup": {"Properties": {"SecurityGroupIngress": [{"ToPort": "22", "CidrIp": {"Ref": "AdminLocation"}, "IpProtocol": "tcp", "FromPort": "22"}, {"ToPort": "80", "CidrIp": {"Ref": "AdminLocation"}, "IpProtocol": "tcp", "FromPort": "80"}, {"ToPort": "443", "CidrIp": {"Ref": "AdminLocation"}, "IpProtocol": "tcp", "FromPort": "443"}], "GroupDescription": "Enable admin access to servers", "VpcId": {"Ref": "Vpc"}}, "Type": "AWS::EC2::SecurityGroup"}, "MasterInstanceProfile": {"Properties": {"Path": "/", "Roles": [{"Ref": "MasterRole"}]}, "Type": "AWS::IAM::InstanceProfile"}, "SlaveRole": {"Properties": {"Policies": [{"PolicyDocument": {"Version": "2012-10-17", "Statement": [{"Effect": "Allow", "Resource": [{"Ref": "AWS::StackId"}, {"Fn::Join": ["", [{"Ref": "AWS::StackId"}, "/*"]]}], "Action": ["cloudformation:*"]}, {"Effect": "Allow", "Resource": "*", "Action": ["ec2:CreateTags", "ec2:DescribeInstances", "ec2:CreateVolume", "ec2:DeleteVolume", "ec2:AttachVolume", "ec2:DetachVolume", "ec2:DescribeVolumes", "ec2:DescribeVolumeStatus", "ec2:DescribeVolumeAttribute", "ec2:CreateSnapshot", "ec2:CopySnapshot", "ec2:DeleteSnapshot", "ec2:DescribeSnapshots", "ec2:DescribeSnapshotAttribute", "autoscaling:DescribeAutoScalingGroups", "cloudwatch:PutMetricData"]}]}, "PolicyName": "Slaves"}], "AssumeRolePolicyDocument": {"Version": "2012-10-17", "Statement": [{"Effect": "Allow", "Principal": {"Service": ["ec2.amazonaws.com"]}, "Action": ["sts:AssumeRole"]}]}}, "Type": "AWS::IAM::Role"}, "SlaveInstanceProfile": {"Properties": {"Path": "/", "Roles": [{"Ref": "SlaveRole"}]}, "Type": "AWS::IAM::InstanceProfile"}, "PublicSlaveSecurityGroup": {"Properties": {"GroupDescription": "Mesos Slaves Public", "VpcId": {"Ref": "Vpc"}}, "Type": "AWS::EC2::SecurityGroup"}, "PublicSubnetRouteTableAssociation": {"Properties": {"SubnetId": {"Ref": "PublicSubnet"}, "RouteTableId": {"Ref": "PublicRouteTable"}}, "Type": "AWS::EC2::SubnetRouteTableAssociation"}, "MasterRole": {"Properties": {"Policies": [{"PolicyDocument": {"Version": "2012-10-17", "Statement": [{"Effect": "Allow", "Resource": [{"Fn::Join": ["", [{"Fn::If": ["RegionIsUsGovWest1", "arn:aws-us-gov:s3:::", "arn:aws:s3:::"]}, {"Ref": "ExhibitorS3Bucket"}, "/*"]]}, {"Fn::Join": ["", [{"Fn::If": ["RegionIsUsGovWest1", "arn:aws-us-gov:s3:::", "arn:aws:s3:::"]}, {"Ref": "ExhibitorS3Bucket"}]]}], "Action": ["s3:AbortMultipartUpload", "s3:DeleteObject", "s3:GetBucketAcl", "s3:GetBucketPolicy", "s3:GetObject", "s3:GetObjectAcl", "s3:ListBucket", "s3:ListBucketMultipartUploads", "s3:ListMultipartUploadParts", "s3:PutObject", "s3:PutObjectAcl"]}, {"Effect": "Allow", "Resource": [{"Ref": "AWS::StackId"}, {"Fn::Join": ["", [{"Ref": "AWS::StackId"}, "/*"]]}], "Action": ["cloudformation:*"]}, {"Effect": "Allow", "Resource": "*", "Action": ["ec2:DescribeKeyPairs", "ec2:DescribeSubnets", "autoscaling:DescribeLaunchConfigurations", "autoscaling:UpdateAutoScalingGroup", "autoscaling:DescribeAutoScalingGroups", "autoscaling:DescribeScalingActivities", "elasticloadbalancing:DescribeLoadBalancers"]}]}, "PolicyName": "root"}], "Path": "/", "AssumeRolePolicyDocument": {"Version": "2012-10-17", "Statement": [{"Effect": "Allow", "Principal": {"Service": ["ec2.amazonaws.com"]}, "Action": ["sts:AssumeRole"]}]}}, "Type": "AWS::IAM::Role"}, "PublicRouteTable": {"Properties": {"Tags": [{"Key": "Application", "Value": {"Ref": "AWS::StackName"}}, {"Key": "Network", "Value": "Public"}], "VpcId": {"Ref": "Vpc"}}, "DependsOn": "Vpc", "Type": "AWS::EC2::RouteTable"}, "SlaveToPublicSlaveIngress": {"Properties": {"ToPort": "65535", "FromPort": "0", "IpProtocol": "-1", "GroupId": {"Ref": "PublicSlaveSecurityGroup"}, "SourceSecurityGroupId": {"Ref": "SlaveSecurityGroup"}}, "Type": "AWS::EC2::SecurityGroupIngress"}, "PublicSlaveIngressFour": {"Properties": {"ToPort": "21", "FromPort": "0", "CidrIp": "0.0.0.0/0", "IpProtocol": "udp", "GroupId": {"Ref": "PublicSlaveSecurityGroup"}}, "Type": "AWS::EC2::SecurityGroupIngress"}, "MasterToSlaveIngress": {"Properties": {"ToPort": "65535", "FromPort": "0", "IpProtocol": "-1", "GroupId": {"Ref": "SlaveSecurityGroup"}, "SourceSecurityGroupId": {"Ref": "MasterSecurityGroup"}}, "Type": "AWS::EC2::SecurityGroupIngress"}, "PrivateOutboundNetworkAclEntry": {"Properties": {"Egress": "true", "RuleAction": "allow", "NetworkAclId": {"Ref": "PrivateNetworkAcl"}, "CidrBlock": "0.0.0.0/0", "Protocol": "-1", "PortRange": {"From": "0", "To": "65535"}, "RuleNumber": "100"}, "Type": "AWS::EC2::NetworkAclEntry"}, "MasterToMasterIngress": {"Properties": {"ToPort": "65535", "FromPort": "0", "IpProtocol": "-1", "GroupId": {"Ref": "MasterSecurityGroup"}, "SourceSecurityGroupId": {"Ref": "MasterSecurityGroup"}}, "Type": "AWS::EC2::SecurityGroupIngress"}, "SlaveSecurityGroup": {"Properties": {"GroupDescription": "Mesos Slaves", "VpcId": {"Ref": "Vpc"}}, "Type": "AWS::EC2::SecurityGroup"}, "DHCPOptions": {"Properties": {"DomainName": {"Fn::If": ["RegionIsUsEast1", "ec2.internal", {"Fn::Join": ["", [{"Ref": "AWS::Region"}, ".compute.internal"]]}]}, "DomainNameServers": ["AmazonProvidedDNS"]}, "Type": "AWS::EC2::DHCPOptions"}, "PublicSlaveIngressFive": {"Properties": {"ToPort": "5050", "FromPort": "23", "CidrIp": "0.0.0.0/0", "IpProtocol": "udp", "GroupId": {"Ref": "PublicSlaveSecurityGroup"}}, "Type": "AWS::EC2::SecurityGroupIngress"}, "PublicSlaveIngressThree": {"Properties": {"ToPort": "32000", "FromPort": "5052", "CidrIp": "0.0.0.0/0", "IpProtocol": "tcp", "GroupId": {"Ref": "PublicSlaveSecurityGroup"}}, "Type": "AWS::EC2::SecurityGroupIngress"}, "PrivateInboundNetworkAclEntry": {"Properties": {"Egress": "false", "RuleAction": "allow", "NetworkAclId": {"Ref": "PrivateNetworkAcl"}, "CidrBlock": "0.0.0.0/0", "Protocol": "-1", "PortRange": {"From": "0", "To": "65535"}, "RuleNumber": "100"}, "Type": "AWS::EC2::NetworkAclEntry"}, "PublicSlaveIngressTwo": {"Properties": {"ToPort": "5050", "FromPort": "23", "CidrIp": "0.0.0.0/0", "IpProtocol": "tcp", "GroupId": {"Ref": "PublicSlaveSecurityGroup"}}, "Type": "AWS::EC2::SecurityGroupIngress"}, "OutboundNetworkAclEntry": {"Properties": {"Egress": "true", "RuleAction": "allow", "NetworkAclId": {"Ref": "PublicNetworkAcl"}, "CidrBlock": "0.0.0.0/0", "Protocol": "-1", "PortRange": {"From": "0", "To": "65535"}, "RuleNumber": "100"}, "Type": "AWS::EC2::NetworkAclEntry"}, "MasterSecurityGroup": {"Properties": {"SecurityGroupIngress": [{"ToPort": "5050", "SourceSecurityGroupId": {"Ref": "LbSecurityGroup"}, "IpProtocol": "tcp", "FromPort": "5050"}, {"ToPort": "80", "SourceSecurityGroupId": {"Ref": "LbSecurityGroup"}, "IpProtocol": "tcp", "FromPort": "80"}, {"ToPort": "443", "SourceSecurityGroupId": {"Ref": "LbSecurityGroup"}, "IpProtocol": "tcp", "FromPort": "443"}, {"ToPort": "8080", "SourceSecurityGroupId": {"Ref": "LbSecurityGroup"}, "IpProtocol": "tcp", "FromPort": "8080"}, {"ToPort": "8181", "SourceSecurityGroupId": {"Ref": "LbSecurityGroup"}, "IpProtocol": "tcp", "FromPort": "8181"}, {"ToPort": "2181", "SourceSecurityGroupId": {"Ref": "LbSecurityGroup"}, "IpProtocol": "tcp", "FromPort": "2181"}], "GroupDescription": "Mesos Masters", "VpcId": {"Ref": "Vpc"}}, "Type": "AWS::EC2::SecurityGroup"}, "MasterServerGroup": {"CreationPolicy": {"ResourceSignal": {"Timeout": {"Fn::FindInMap": ["Parameters", "StackCreationTimeout", "default"]}, "Count": 3}}, "Properties": {"MaxSize": 3, "DesiredCapacity": 3, "MinSize": 3, "VPCZoneIdentifier": [{"Ref": "PublicSubnet"}], "LaunchConfigurationName": {"Ref": "MasterLaunchConfig"}, "LoadBalancerNames": [{"Ref": "ElasticLoadBalancer"}, {"Ref": "InternalMasterLoadBalancer"}], "AvailabilityZones": [{"Fn::GetAtt": ["PublicSubnet", "AvailabilityZone"]}], "Tags": [{"Key": "role", "PropagateAtLaunch": "true", "Value": "mesos-master"}]}, "DependsOn": "GatewayToInternet", "Type": "AWS::AutoScaling::AutoScalingGroup"}, "NATInstance": {"Properties": {"ImageId": {"Fn::FindInMap": ["NATAmi", {"Ref": "AWS::Region"}, "default"]}, "InstanceType": "m3.medium", "KeyName": {"Ref": "KeyName"}, "SourceDestCheck": "false", "NetworkInterfaces": [{"SubnetId": {"Ref": "PublicSubnet"}, "AssociatePublicIpAddress": "true", "GroupSet": [{"Ref": "SlaveSecurityGroup"}, {"Ref": "MasterSecurityGroup"}, {"Ref": "AdminSecurityGroup"}], "DeleteOnTermination": "true", "DeviceIndex": "0"}]}, "DependsOn": "GatewayToInternet", "Type": "AWS::EC2::Instance"}, "MasterToPublicSlaveIngress": {"Properties": {"ToPort": "65535", "FromPort": "0", "IpProtocol": "-1", "GroupId": {"Ref": "PublicSlaveSecurityGroup"}, "SourceSecurityGroupId": {"Ref": "MasterSecurityGroup"}}, "Type": "AWS::EC2::SecurityGroupIngress"}, "PrivateSubnetNetworkAclAssociation": {"Properties": {"SubnetId": {"Ref": "PrivateSubnet"}, "NetworkAclId": {"Ref": "PrivateNetworkAcl"}}, "Type": "AWS::EC2::SubnetNetworkAclAssociation"}, "PrivateRouteTable": {"Properties": {"Tags": [{"Key": "Application", "Value": {"Ref": "AWS::StackName"}}, {"Key": "Network", "Value": "Public"}], "VpcId": {"Ref": "Vpc"}}, "Type": "AWS::EC2::RouteTable"}, "PublicSlaveIngressSix": {"Properties": {"ToPort": "32000", "FromPort": "5052", "CidrIp": "0.0.0.0/0", "IpProtocol": "udp", "GroupId": {"Ref": "PublicSlaveSecurityGroup"}}, "Type": "AWS::EC2::SecurityGroupIngress"}, "InboundNetworkAclEntry": {"Properties": {"Egress": "false", "RuleAction": "allow", "NetworkAclId": {"Ref": "PublicNetworkAcl"}, "CidrBlock": "0.0.0.0/0", "Protocol": "-1", "PortRange": {"From": "0", "To": "65535"}, "RuleNumber": "100"}, "Type": "AWS::EC2::NetworkAclEntry"}, "SlaveToMasterLBIngress": {"Properties": {"ToPort": "2181", "FromPort": "2181", "IpProtocol": "tcp", "GroupId": {"Ref": "LbSecurityGroup"}, "SourceSecurityGroupId": {"Ref": "SlaveSecurityGroup"}}, "Type": "AWS::EC2::SecurityGroupIngress"}, "SlaveToMasterIngress": {"Properties": {"ToPort": "65535", "FromPort": "0", "IpProtocol": "-1", "GroupId": {"Ref": "MasterSecurityGroup"}, "SourceSecurityGroupId": {"Ref": "SlaveSecurityGroup"}}, "Type": "AWS::EC2::SecurityGroupIngress"}, "SlaveServerGroup": {"CreationPolicy": {"ResourceSignal": {"Timeout": {"Fn::FindInMap": ["Parameters", "StackCreationTimeout", "default"]}, "Count": {"Ref": "SlaveInstanceCount"}}}, "Properties": {"MaxSize": {"Ref": "SlaveInstanceCount"}, "DesiredCapacity": {"Ref": "SlaveInstanceCount"}, "MinSize": {"Ref": "SlaveInstanceCount"}, "VPCZoneIdentifier": [{"Ref": "PrivateSubnet"}], "LaunchConfigurationName": {"Ref": "SlaveLaunchConfig"}, "AvailabilityZones": [{"Fn::GetAtt": ["PrivateSubnet", "AvailabilityZone"]}], "Tags": [{"Key": "role", "PropagateAtLaunch": "true", "Value": "mesos-slave"}]}, "DependsOn": ["PrivateOutboundNetworkAclEntry", "NATInstance"], "Type": "AWS::AutoScaling::AutoScalingGroup"}}, "Parameters": {"SlaveInstanceCount": {"Description": "Required: Specify the number of private agent nodes or accept the default.", "Default": "5", "Type": "Number"}, "PublicSlaveInstanceCount": {"Description": "Required: Specify the number of public agent nodes or accept the default.", "Default": "1", "Type": "Number"}, "OAuthEnabled": {"AllowedValues": ["true", "false"], "Description": "\nEnable OAuth authentication", "Default": "true", "Type": "String"}, "AdminLocation": {"ConstraintDescription": "must be a valid CIDR.", "Default": "0.0.0.0/0", "Type": "String", "MinLength": "9", "Description": "Optional: Specify the IP range to whitelist for access to the admin zone. Must be a valid CIDR.", "AllowedPattern": "^([0-9]+\\.){3}[0-9]+\\/[0-9]+$", "MaxLength": "18"}, "KeyName": {"Description": "Required: Specify your AWS EC2 Key Pair.", "Type": "AWS::EC2::KeyPair::KeyName"}}, "Conditions": {"RegionIsUsGovWest1": {"Fn::Equals": [{"Ref": "AWS::Region"}, "us-gov-west-1"]}, "RegionIsUsEast1": {"Fn::Equals": [{"Ref": "AWS::Region"}, "us-east-1"]}}, "AWSTemplateFormatVersion": "2010-09-09", "Metadata": {"DcosImageCommit": "a5ecc9af5d9ca903f53fa16f6f0ebd597095652e", "TemplateGenerationDate": "2017-09-01 06:19:18.939643"}, "Description": "DC/OS AWS CloudFormation Template"}